/* tslint:disable */
/* eslint-disable */
/**
 * Chat API
 * WebSocket chat service with anonymous pairing, skip & timer rotation, and optional account registration. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Internal user struct generated for server logic
 * @export
 * @interface InternalUser
 */
export interface InternalUser {
    /**
     * 
     * @type {string}
     * @memberof InternalUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalUser
     */
    username?: string;
    /**
     * 
     * @type {Date}
     * @memberof InternalUser
     */
    lastSkipTime?: Date;
    /**
     * WebSocket connection (ignored in JSON)
     * @type {string}
     * @memberof InternalUser
     */
    conn?: string;
}

/**
 * Check if a given object implements the InternalUser interface.
 */
export function instanceOfInternalUser(value: object): value is InternalUser {
    return true;
}

export function InternalUserFromJSON(json: any): InternalUser {
    return InternalUserFromJSONTyped(json, false);
}

export function InternalUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalUser {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'] == null ? undefined : json['username'],
        'lastSkipTime': json['lastSkipTime'] == null ? undefined : (new Date(json['lastSkipTime'])),
        'conn': json['conn'] == null ? undefined : json['conn'],
    };
}

export function InternalUserToJSON(json: any): InternalUser {
    return InternalUserToJSONTyped(json, false);
}

export function InternalUserToJSONTyped(value?: InternalUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'lastSkipTime': value['lastSkipTime'] == null ? undefined : ((value['lastSkipTime']).toISOString()),
        'conn': value['conn'],
    };
}

