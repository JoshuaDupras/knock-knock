//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ChatMessageType.
const (
	Chat ChatMessageType = "chat"
)

// AnonymousSessionRequest defines model for AnonymousSessionRequest.
type AnonymousSessionRequest struct {
	DisplayName string `json:"displayName"`
}

// AnonymousSessionResponse defines model for AnonymousSessionResponse.
type AnonymousSessionResponse struct {
	// ConversationId ID of the conversation the user is placed into.
	ConversationId   string `json:"conversationId"`
	ExpiresInSeconds int    `json:"expiresInSeconds"`

	// Token Short‑lived JWT (e.g. 5 minutes)
	Token        string `json:"token"`
	WebsocketUrl string `json:"websocketUrl"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token Long‑lived JWT (24 h by default)
	Token string `json:"token"`
}

// ChatMessage Generic message format exchanged over WebSocket.
type ChatMessage struct {
	ConversationId string          `json:"conversationId"`
	Message        string          `json:"message"`
	Timestamp      time.Time       `json:"timestamp"`
	Type           ChatMessageType `json:"type"`
}

// ChatMessageType defines model for ChatMessage.Type.
type ChatMessageType string

// Error defines model for Error.
type Error struct {
	// Details Optional machine‑readable code or info
	Details *string `json:"details,omitempty"`
	Error   string  `json:"error"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Pong defines model for Pong.
type Pong struct {
	Pong string `json:"pong"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// GetWsChatParams defines parameters for GetWsChat.
type GetWsChatParams struct {
	Token string `form:"token" json:"token"`
}

// PostAccountRegisterJSONRequestBody defines body for PostAccountRegister for application/json ContentType.
type PostAccountRegisterJSONRequestBody = RegisterRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostSessionAnonymousJSONRequestBody defines body for PostSessionAnonymous for application/json ContentType.
type PostSessionAnonymousJSONRequestBody = AnonymousSessionRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAccountRegisterWithBody request with any body
	PostAccountRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountRegister(ctx context.Context, body PostAccountRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionAnonymousWithBody request with any body
	PostSessionAnonymousWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionAnonymous(ctx context.Context, body PostSessionAnonymousJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionSkip request
	PostSessionSkip(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWsChat request
	GetWsChat(ctx context.Context, params *GetWsChatParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAccountRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountRegister(ctx context.Context, body PostAccountRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionAnonymousWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionAnonymousRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionAnonymous(ctx context.Context, body PostSessionAnonymousJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionAnonymousRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionSkip(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionSkipRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWsChat(ctx context.Context, params *GetWsChatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWsChatRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAccountRegisterRequest calls the generic PostAccountRegister builder with application/json body
func NewPostAccountRegisterRequest(server string, body PostAccountRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountRegisterRequestWithBody generates requests for PostAccountRegister with any type of body
func NewPostAccountRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSessionAnonymousRequest calls the generic PostSessionAnonymous builder with application/json body
func NewPostSessionAnonymousRequest(server string, body PostSessionAnonymousJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionAnonymousRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionAnonymousRequestWithBody generates requests for PostSessionAnonymous with any type of body
func NewPostSessionAnonymousRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/anonymous")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionSkipRequest generates requests for PostSessionSkip
func NewPostSessionSkipRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/skip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWsChatRequest generates requests for GetWsChat
func NewGetWsChatRequest(server string, params *GetWsChatParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws/chat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAccountRegisterWithBodyWithResponse request with any body
	PostAccountRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountRegisterResponse, error)

	PostAccountRegisterWithResponse(ctx context.Context, body PostAccountRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountRegisterResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// PostSessionAnonymousWithBodyWithResponse request with any body
	PostSessionAnonymousWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionAnonymousResponse, error)

	PostSessionAnonymousWithResponse(ctx context.Context, body PostSessionAnonymousJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionAnonymousResponse, error)

	// PostSessionSkipWithResponse request
	PostSessionSkipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSessionSkipResponse, error)

	// GetWsChatWithResponse request
	GetWsChatWithResponse(ctx context.Context, params *GetWsChatParams, reqEditors ...RequestEditorFn) (*GetWsChatResponse, error)
}

type PostAccountRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthResponse
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostAccountRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pong
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionAnonymousResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AnonymousSessionResponse
}

// Status returns HTTPResponse.Status
func (r PostSessionAnonymousResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionAnonymousResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionSkipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON429      *Error
}

// Status returns HTTPResponse.Status
func (r PostSessionSkipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionSkipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWsChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWsChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWsChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAccountRegisterWithBodyWithResponse request with arbitrary body returning *PostAccountRegisterResponse
func (c *ClientWithResponses) PostAccountRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountRegisterResponse, error) {
	rsp, err := c.PostAccountRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAccountRegisterWithResponse(ctx context.Context, body PostAccountRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountRegisterResponse, error) {
	rsp, err := c.PostAccountRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountRegisterResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// PostSessionAnonymousWithBodyWithResponse request with arbitrary body returning *PostSessionAnonymousResponse
func (c *ClientWithResponses) PostSessionAnonymousWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionAnonymousResponse, error) {
	rsp, err := c.PostSessionAnonymousWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionAnonymousResponse(rsp)
}

func (c *ClientWithResponses) PostSessionAnonymousWithResponse(ctx context.Context, body PostSessionAnonymousJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionAnonymousResponse, error) {
	rsp, err := c.PostSessionAnonymous(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionAnonymousResponse(rsp)
}

// PostSessionSkipWithResponse request returning *PostSessionSkipResponse
func (c *ClientWithResponses) PostSessionSkipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSessionSkipResponse, error) {
	rsp, err := c.PostSessionSkip(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionSkipResponse(rsp)
}

// GetWsChatWithResponse request returning *GetWsChatResponse
func (c *ClientWithResponses) GetWsChatWithResponse(ctx context.Context, params *GetWsChatParams, reqEditors ...RequestEditorFn) (*GetWsChatResponse, error) {
	rsp, err := c.GetWsChat(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWsChatResponse(rsp)
}

// ParsePostAccountRegisterResponse parses an HTTP response from a PostAccountRegisterWithResponse call
func ParsePostAccountRegisterResponse(rsp *http.Response) (*PostAccountRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pong
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionAnonymousResponse parses an HTTP response from a PostSessionAnonymousWithResponse call
func ParsePostSessionAnonymousResponse(rsp *http.Response) (*PostSessionAnonymousResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionAnonymousResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AnonymousSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostSessionSkipResponse parses an HTTP response from a PostSessionSkipWithResponse call
func ParsePostSessionSkipResponse(rsp *http.Response) (*PostSessionSkipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionSkipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetWsChatResponse parses an HTTP response from a GetWsChatWithResponse call
func ParseGetWsChatResponse(rsp *http.Response) (*GetWsChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWsChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a persistent account and optionally keep the current conversation
	// (POST /account/register)
	PostAccountRegister(w http.ResponseWriter, r *http.Request)
	// Authenticate an existing account
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Retrieve the current user profile
	// (GET /me)
	GetMe(w http.ResponseWriter, r *http.Request)
	// Health check
	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
	// Start an anonymous session and join a conversation
	// (POST /session/anonymous)
	PostSessionAnonymous(w http.ResponseWriter, r *http.Request)
	// Leave the current conversation and rotate immediately
	// (POST /session/skip)
	PostSessionSkip(w http.ResponseWriter, r *http.Request)
	// WebSocket endpoint for real‑time chat
	// (GET /ws/chat)
	GetWsChat(w http.ResponseWriter, r *http.Request, params GetWsChatParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAccountRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAccountRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAccountRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSessionAnonymous operation middleware
func (siw *ServerInterfaceWrapper) PostSessionAnonymous(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSessionAnonymous(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSessionSkip operation middleware
func (siw *ServerInterfaceWrapper) PostSessionSkip(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSessionSkip(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWsChat operation middleware
func (siw *ServerInterfaceWrapper) GetWsChat(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWsChatParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWsChat(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/account/register", wrapper.PostAccountRegister)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.PostLogin)
	m.HandleFunc("GET "+options.BaseURL+"/me", wrapper.GetMe)
	m.HandleFunc("GET "+options.BaseURL+"/ping", wrapper.GetPing)
	m.HandleFunc("POST "+options.BaseURL+"/session/anonymous", wrapper.PostSessionAnonymous)
	m.HandleFunc("POST "+options.BaseURL+"/session/skip", wrapper.PostSessionSkip)
	m.HandleFunc("GET "+options.BaseURL+"/ws/chat", wrapper.GetWsChat)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
