name: build-test-push-deploy
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # ───── shared env for *all* steps ───────────────────────────
    env:
      IMAGE_TAG: ${{ github.sha }}
      REGISTRY: ghcr.io
      ORG: joshuadupras
      REPO: knock-knock
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_TOKEN:   ${{ secrets.REGISTRY_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      # Lower-case "owner/repo" once and reuse for image tags
      - name: Lower-case repo slug
        id: slug
        run: |
          echo "repo=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      # ─── Login to GHCR from the build runner ──────────────────
      - name: GHCR login (runner)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_TOKEN }}

      # ─── Build & push backend image ───────────────────────────
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.slug.outputs.repo }}-backend:${{ env.IMAGE_TAG }}

      # ─── Build & push frontend image ──────────────────────────
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.slug.outputs.repo }}-frontend:${{ env.IMAGE_TAG }}

      # ─── Deploy to droplet via SSH ────────────────────────────
      - name: Deploy to droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:         ${{ secrets.SERVER_HOST }}
          username:     ${{ secrets.SERVER_USER }}
          key:          ${{ secrets.SERVER_SSH_KEY }}
          passphrase:   ${{ secrets.SERVER_SSH_PASSPHRASE }}
          envs:         IMAGE_TAG,REGISTRY,ORG,REPO,REGISTRY_USERNAME,REGISTRY_TOKEN
          script: |
            set -eux

            cd /srv/knock-knock

            # 1)  Refresh compose file & other code
            git fetch --tags
            git reset --hard origin/main

            # 2) Create the .env file for docker-compose — no leading spaces
            cat > .env <<EOF
            IMAGE_TAG=${IMAGE_TAG}
            REGISTRY=${REGISTRY}
            ORG=${ORG}
            REPO=${REPO}
            EOF

            # 3️) Log in to GHCR so the droplet can pull the private images
            echo "${REGISTRY_TOKEN}" | docker login "${REGISTRY}" \
              --username "${REGISTRY_USERNAME}" --password-stdin

            # 4️) Pull the new images & (re)create the stack
            docker compose --env-file .env -f docker-compose.prod.yml pull
            docker compose --env-file .env -f docker-compose.prod.yml up -d --remove-orphans

            # 5️) Reclaim disk
            docker image prune -af
