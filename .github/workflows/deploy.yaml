name: build-test-push-deploy
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_TAG: ${{ github.sha }}
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v4

      - name: Lowercase repo slug
        id: slug
        run: |
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      # ----- authenticate to GHCR -----
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # ----- build + push backend -----
      - uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.slug.outputs.repo }}-backend:${{ env.IMAGE_TAG }}

      # ----- build + push frontend -----
      - uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.slug.outputs.repo }}-frontend:${{ env.IMAGE_TAG }}

      # ----- deploy over SSH -----
      - name: Deploy to droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          envs: IMAGE_TAG
          script: |
            set -eux

            cd /srv/knock-knock

            # 1) pull latest compose & code
            git fetch --tags
            git reset --hard origin/main

            # 2) write all three vars in one go
            cat > .env <<EOF
            IMAGE_TAG=${IMAGE_TAG}
            REGISTRY: ghcr.io
            ORG=joshuadupras
            REPO=knock-knock
            EOF

            # 3) Log into GHCR so pulls of private images succeed
            echo "${{ secrets.REGISTRY_TOKEN }}" | \
              docker login ${REGISTRY} \
                --username="${{ secrets.REGISTRY_USERNAME }}" \
                --password-stdin

            # 4) Pull & recreate your stack
            docker compose --env-file .env -f docker-compose.prod.yml pull
            docker compose --env-file .env -f docker-compose.prod.yml up -d --remove-orphans

            # 5) cleanup old layers
            docker image prune -af