openapi: 3.0.3
info:
  title: Chat API
  description: WebSocket-based chat application with authentication
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /ping:
    get:
      responses:
        '200':
          description: ping response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
  /login:
    post:
      summary: Logs in a user and returns a JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /me:
    get:
      summary: Gets the logged-in user's info
      operationId: getUserInfo
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /logout:
    post:
      summary: Logs out a user (clears session)
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
  /ws:
    get:
      summary: WebSocket connection for real-time chat and user tracking
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "101":
          description: Switching Protocols
  /users:
    get:
      summary: Get real-time list of active users
      responses:
        "200":
          description: List of active users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: string
                  count:
                    type: integer

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
    LoginRequest:
      type: object
      required:
        - username
        - plaintextPassword
      properties:
        username:
          type: string
        plaintextPassword:
          type: string
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    User:
      type: object
      required:
        - id
        - username
        - passwordHash
      properties:
        id:
          type: string
        username:
          type: string
        passwordHash:
          type: string
    ActiveUsers:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
