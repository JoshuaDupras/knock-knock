/* tslint:disable */
/* eslint-disable */
/**
 * Chat API
 * WebSocket chat service with anonymous pairing, skip & timer rotation, and optional account registration. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A single envelope for every WebSocket event.
 * 
 * • **chat**   → `message` + `timestamp` are present  
 * • **paired** → `expiresAt` is present (when the round ends)  
 * • **time_up**→ `timestamp` is present (when the round actually ends)
 * 
 * All other combinations are ignored by the server.
 * 
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    type: ChatMessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    conversationId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    message?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ChatMessage
     */
    timestamp?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ChatMessage
     */
    expiresAt?: Date | null;
}


/**
 * @export
 */
export const ChatMessageTypeEnum = {
    Chat: 'chat',
    Paired: 'paired',
    TimeUp: 'time_up'
} as const;
export type ChatMessageTypeEnum = typeof ChatMessageTypeEnum[keyof typeof ChatMessageTypeEnum];


/**
 * Check if a given object implements the ChatMessage interface.
 */
export function instanceOfChatMessage(value: object): value is ChatMessage {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    return true;
}

export function ChatMessageFromJSON(json: any): ChatMessage {
    return ChatMessageFromJSONTyped(json, false);
}

export function ChatMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'conversationId': json['conversationId'],
        'message': json['message'] == null ? undefined : json['message'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
    };
}

export function ChatMessageToJSON(json: any): ChatMessage {
    return ChatMessageToJSONTyped(json, false);
}

export function ChatMessageToJSONTyped(value?: ChatMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'conversationId': value['conversationId'],
        'message': value['message'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt'] as any).toISOString()),
    };
}

