/* tslint:disable */
/* eslint-disable */
/**
 * Chat API
 * WebSocket chat service with anonymous pairing, skip & timer rotation, and optional account registration. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnonymousSessionResponse,
  AuthResponse,
  LoginRequest,
  Pong,
  RegisterRequest,
  User,
} from '../models/index';
import {
    AnonymousSessionResponseFromJSON,
    AnonymousSessionResponseToJSON,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    PongFromJSON,
    PongToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AccountRegisterPostRequest {
    registerRequest: RegisterRequest;
}

export interface LoginPostRequest {
    loginRequest: LoginRequest;
}

export interface WsChatGetRequest {
    token: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a persistent account (username must be unique)
     */
    async accountRegisterPostRaw(requestParameters: AccountRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling accountRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Create a persistent account (username must be unique)
     */
    async accountRegisterPost(requestParameters: AccountRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.accountRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log in with an existing account
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling loginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Log in with an existing account
     */
    async loginPost(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the current user profile
     */
    async meGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Return the current user profile
     */
    async meGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.meGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PongFromJSON(jsonValue));
    }

    /**
     */
    async pingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pong> {
        const response = await this.pingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * join the waiting queue
     */
    async sessionAnonymousPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnonymousSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session/anonymous`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousSessionResponseFromJSON(jsonValue));
    }

    /**
     * join the waiting queue
     */
    async sessionAnonymousPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnonymousSessionResponse> {
        const response = await this.sessionAnonymousPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Leave the current conversation and rotate immediately
     */
    async sessionSkipPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/session/skip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave the current conversation and rotate immediately
     */
    async sessionSkipPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionSkipPostRaw(initOverrides);
    }

    /**
     * WebSocket for real‑time chat
     */
    async wsChatGetRaw(requestParameters: WsChatGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling wsChatGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ws/chat`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * WebSocket for real‑time chat
     */
    async wsChatGet(requestParameters: WsChatGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.wsChatGetRaw(requestParameters, initOverrides);
    }

}
